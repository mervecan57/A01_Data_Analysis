---
title: "Portfoliomanagement and Financial Analysis - Assignment 1"
subtitle: "Submit until Monday 2020-09-21, 13:00"
author: "Can, Merve"
output: html_notebook
---


```{r load_packs}
pacman::p_load(tidyverse,tidyquant,FFdownload)
```

For all exercises please refer to my book [Tidy Portfoliomanagement in R](https://bookdown.org/sstoeckl/Tidy_Portfoliomanagement_in_R). Unfortunately some functions (e.g. `get_exchange()`) are not working on rstudio.cloud, so please try to solve the exercises without. Also remember, that ecverything you do below must be **explained** to me (why? what does this mean? what is the interpretation?). If you have any questions or problems, please refer to the assignment forum on moodle.

## Exercise 1: xts

Create a daily time series for `r lubridate::year(Sys.time())`:

lubridate::year(Sys.time()) # to find out the year

seq(as.Date("2020-01-01"), length=366, by="day") 

timeSequence(from = "2020-01-01", to = "2020-12-31", by = "day")


1. Find the subset of first and last days per month/quarter (uniquely)

#month

seq(as.Date("2020-01-01"), length=12, by="month") # Version 1

timeSequence(from = "2020-01-01", to = "2020-12-31", by = "month") # Version 2

dates1 <- seq(as.Date("2020-01-01"), length=12, by="month"); dates1

dates2 <- timeSequence(from = "2020-01-01", to = "2020-12-31", by = "month"); dates2

timeFirstDayInMonth(dates1 -7)
timeFirstDayInMonth(dates2 -7)

timeLastDayInMonth(dates1)
timeLastDayInMonth(dates2)

#quarter

timeFirstDayInQuarter(dates1)
timeFirstDayInQuarter(dates2)

timeLastDayInQuarter(dates1)
timeLastDayInQuarter(dates2)



2. Take December `r lubridate::year(Sys.time())-1` and remove all weekends and holidays in Zurich (Tokyo)

lubridate::year(Sys.time())-1 # 2019

dateSeq <- timeSequence(from = "2019-12-01", to = "2019-12-31", by = "day")

holidayZURICH(2019)

dateSeq2 <- dateSeq[isWeekday(dateSeq)]; dateSeq2 # only weekdays

dayOfWeek(dateSeq2)

dateSeq3 <- dateSeq[isBizday(dateSeq, holidayZURICH(2019))]; dateSeq3 # select only BusinessDays of Zurich

dayOfWeek(dateSeq3)



3. create a series of five dates & times in New York. Show them for New York, London and Belgrade

Dates <- c("1999-04-17","2002-08-01","2003-10-06","1977-09-18","1978-05-21")

Times <- c( "16:00:00", "10:00:00", "08:00:00", "11:00:00","12:00:00")

DatesTimes <- paste(Dates, Times)

as.Date(DatesTimes)

NY <- timeDate(DatesTimes, zone = "NewYork", FinCenter = "NewYork")
LD <- timeDate(DatesTimes, zone = "NewYork", FinCenter = "London")
BG <- timeDate(DatesTimes, zone = "NewYork", FinCenter = "Belgrade")



## Exercise 2: Download Financial Data and Merge

Download information on all stocks currently part of the S&P500. Select 10 that have data back to 2000. Additionally download the S&P 500 index and the four Fama-French factors including the risk-free rate (using my package [`ffdownload`](https://github.com/sstoeckl/ffdownload)). Merge all data together and calculate returns (simple or continuous returns?).
Split your data in two files: One holding daily returns and one with monthly returns. Additionally show how to we could get from long to wide format to transfer between `tibble` (`tsibble`) and xts.

```{r}
?FFdownload()
tempf <- tempfile(fileext = ".RData"); tempd <- tempdir(); temptxt <- tempfile(fileext = ".txt")
inputlist <- c("F-F_Research_Data_Factors","F-F_Momentum_Factor","F-F_ST_Reversal_Factor","F-F_LT_Reversal_Factor")
# Now process only these files if they can be matched (download only)
FFdownload(exclude_daily=TRUE,tempdir=tempd,download=TRUE,download_only=FALSE,inputlist=inputlist)

tempf2 <- tempfile(fileext = ".RData"); tempd2 <- tempdir()
FFdownload(output_file = tempf2,tempdir = tempd2,exclude_daily = TRUE, download = TRUE, download_only=FALSE, listsave=temptxt)
load(tempf2)
FFdownload$x_25_Portfolios_5x5$monthly$average_value_weighted_returns

```

```{r}
periodReturn
to.period()
```

# 10 S&P 500 stocks with IPO<2000
SP <- tq_index("SP500")
NASDAQ <- tq_exchange("NASDAQ")
NYSE <- tq_exchange("NYSE") 

stocks.selection <- SP %>% 
  inner_join(rbind(NYSE,NASDAQ) %>% select(symbol,last.sale.price,market.cap,ipo.year),by=c("symbol")) %>% # join datasets
  filter(ipo.year<2000&!is.na(market.cap)) %>% # filter years with ipo<2000 or ipo=NA
  arrange(desc(weight)) %>% # sort in descending order
  slice(1:10)

# Additional Data for the S&P500-index 
stocks.prices <- stocks.selection$symbol %>%  # daily prices
    tq_get(get  = "stock.prices",from = "2000-01-01",to = "2019-12-31") %>%
    group_by(symbol)

index.prices <- "^GSPC" %>% 
    tq_get(get  = "stock.prices",from = "2000-01-01",to = "2019-12-31") 
stocks.prices %>% slice(1:2) # show the first two entries of each group


# Dividends and Stock Splits
stocks.dividends <- stocks.selection$symbol %>% 
    tq_get(get  = "dividends",from = "2000-01-01",to = "2019-12-31") %>%
    group_by(symbol)
    
stocks.splits <- stocks.selection$symbol %>% 
    tq_get(get  = "splits",from = "2000-01-01",to = "2019-12-31") %>%
    group_by(symbol)

#Stock Ratios does not work
stocks.ratios <- stocks.selection$symbol %>% 
    tq_get(get  = "key.ratios",from = "2000-01-01",to = "2019-12-31") %>%
    group_by(symbol)


# Fama-French Data
factors <- FFdownload$`x_F-F_Research_Data_Factors`$monthly$Temp2 %>% 
          tk_tbl(rename_index="date") %>% # make tibble
          mutate(date=as.Date(date, frac=1)) %>% # make proper month-end date format
          gather(key=FFvar,value = price,-date) # gather into tidy format
factors %>% group_by(FFvar) %>% slice(1:2)

# if error: library(timetk)


#Stock prices monthly
stocks.prices.monthly <- stocks.prices %>% 
                  tq_transmute(select = c(adjusted,volume), # which column to choose
                               mutate_fun = to.monthly,     # funtion: make monthly series
                               indexAt = "lastof") %>%      
                  ungroup() %>% mutate(date=as.yearmon(date)) 

# Stock Returns monthly
stocks.returns <- stocks.prices %>% 
                  tq_transmute(select = adjusted,
                               mutate_fun = periodReturn,   # create monthly  returns
                               period="monthly", 
                               type="arithmetic") %>% 
                  ungroup() %>% mutate(date=as.yearmon(date))

save(stocks.returns,file="stocksreturn_monthly.RData")

# Stocks Return Daily
stocks.returns.daily <- stocks.prices %>% 
                  tq_transmute(select = adjusted,
                               mutate_fun = periodReturn,   # create daily  returns
                               period="daily", 
                               type="arithmetic") %>% 
                  ungroup() %>% mutate(date=as.yearmon(date))
                  
save(stocks.returns.daily,file="stocksreturns_daily.RData")                  
  
# Index Returns monthly                  
index.returns <- index.prices %>% 
                  tq_transmute(select = adjusted,mutate_fun = periodReturn, 
                               period="monthly", type="arithmetic") %>% 
                  mutate(date=as.yearmon(date))
                  
# Factor Returns monthly (already)
factors.returns <- factors %>% mutate(price=price/100) %>% 
                  mutate(date=as.yearmon(date)) 

# Show first 5 enteries
stocks.prices.monthly %>% ungroup() %>% slice(1:5) 

stocks.returns %>% ungroup() %>% slice(1:5)

index.returns %>% ungroup() %>% slice(1:5) 

factors.returns %>% ungroup() %>% slice(1:5)

# Merging data together
first.merge <- merge(stocks.prices.monthly,stocks.returns, by = c("symbol","date"))

stocks.final <- merge(merge(first.merge,index.returns, by = "date"),factors.returns, by= "date")

# Long to Wide Format
library(tidyr)

stocks.returns.daily



stocks.returns






## Exercise 3: Plotting Data

Carefully work through `vignette("TQ04-charting-with-tidyquant")` and create plots using [ggplot](https://ggplot2.tidyverse.org/) from the tidyverse. Select four assets to highlight all functions that are important for you!

```{r}
ggplot(aes()) + ... + facet_wrap()
```

Additionally we need statistical information, so we want to plot a histogram (including normal density), a box-plot and a qq-plot. Try to accumulate data in a meaningful way to not have 10 different plots!

 
# Get AAPL, AMZN, NFLX, FB Stock Prices
AAPL <- tq_get("AAPL", get = "stock.prices", from = "2015-01-01", to = "2019-12-31")

AMZN <- tq_get("AMZN", get = "stock.prices", from = "2015-01-01", to = "2019-12-31")

NFLX <- tq_get("NFLX", get = "stock.prices", from = "2015-01-01", to = "2019-12-31")

FB <- tq_get("FB", get = "stock.prices", from = "2015-01-01", to = "2019-12-31")


# Histogram (incl. normal density)

hist(AAPL$adjusted, # histogram APPLE
 col="peachpuff", # column color
prob = TRUE, # show densities instead of frequencies
 xlab = "Adjusted",
 main = "APPLE")
lines(density(AAPL$adjusted), # density plot
 lwd = 2, # thickness of line
 col = "chocolate3")

hist(AMZN$adjusted, # histogram AMAZON
 col="peachpuff", # column color
prob = TRUE, # show densities instead of frequencies
 xlab = "Adjusted",
 main = "AMAZON")
lines(density(AMZN$adjusted), # density plot
 lwd = 2, # thickness of line
 col = "chocolate3")

hist(NFLX$adjusted, # histogram NETFLIX
 col="lightpink", # column color
prob = TRUE, # show densities instead of frequencies
 xlab = "Adjusted",
 main = "NETFLIX")
lines(density(NFLX$adjusted), # density plot
 lwd = 2, # thickness of line
 col = "cyan4")

hist(FB$adjusted, # histogram FACEBOOK
 col="rosybrown1", # column color
prob = TRUE, # show densities instead of frequencies
 xlab = "Adjusted",
 main = "FACEBOOK")
lines(density(FB$adjusted), # density plot
 lwd = 2, # thickness of line
 col = "royalblue1")


# Box-Plot
boxplot(AAPL$adjusted, main="APPLE", xlab="Adjusted",col="lightsteelblue1", horizontal = TRUE)

boxplot(AMZN$adjusted, main="AMAZON", xlab="Adjusted",col="yellow", horizontal = TRUE)

boxplot(NFLX$adjusted, main="NETFLIX", xlab="Adjusted",col="red", horizontal = TRUE)

boxplot(FB$adjusted, main="FACEBOOK", xlab="Adjusted",col="royalblue3", horizontal = TRUE)

# qq-Plot

qqnorm(AAPL$adjusted)
qqline(AAPL$adjusted,col="royalblue",lwd=3) #to see if normal distribution

qqnorm(AMZN$adjusted)
qqline(AMZN$adjusted,col="yellow",lwd=3)

qqnorm(NFLX$adjusted)
qqline(NFLX$adjusted,col="red",lwd=3)

qqnorm(FB$adjusted)
qqline(FB$adjusted,col="blue",lwd=3)




## Exercise 4: Statistics

Here you might use all `tidyquant`-vignettes! My shiny-script here might also help you to get an idea: [www.riskindex.eu:3838/mci](www.riskindex.eu:3838/mci).


### Exercise 4.1 Within securities

For the four securities calculate all interesting statistics (measures of location, dispersion, skewness and kurtosis). Check returns for univariate (and multivariate) normality.

```{r}
table.Stats()
table.DownsideRisk
table.HigherMoments
```

AAPL
AMZN
NFLX
FB

#Returns Daily

AAPL.returns <- AAPL %>% 
                  tq_transmute(select = adjusted,
                               mutate_fun = periodReturn,   # create yearly  returns
                               period="yearly", 
                               type="arithmetic") %>% 
                  ungroup() %>% mutate(date=as.yearmon(date))

AMZN.returns <- AMZN %>% 
                  tq_transmute(select = adjusted,
                               mutate_fun = periodReturn,   
                               period="yearly", 
                               type="arithmetic") %>% 
                  ungroup() %>% mutate(date=as.yearmon(date))

NFLX.returns <- NFLX %>% 
                  tq_transmute(select = adjusted,
                               mutate_fun = periodReturn,   
                               period="yearly", 
                               type="arithmetic") %>% 
                  ungroup() %>% mutate(date=as.yearmon(date))

FB.returns <- FB %>% 
                  tq_transmute(select = adjusted,
                               mutate_fun = periodReturn,   
                               period="yearly", 
                               type="arithmetic") %>% 
                  ungroup() %>% mutate(date=as.yearmon(date))


# Arithmetic Mean

mean(AAPL.returns$yearly.returns)

mean(AMZN.returns$yearly.returns)

mean(NFLX.returns$yearly.returns)

mean(FB.returns$yearly.returns)


# Geometric Mean

mean.geometric(AAPL.returns$yearly.returns)

mean.geometric(AMZN.returns$yearly.returns)

mean.geometric(NFLX.returns$yearly.returns)

mean.geometric(FB.returns$yearly.returns)


# Minimum

min(AAPL.returns$yearly.returns)

min(AMZN.returns$yearly.returns)

min(NFLX.returns$yearly.returns)

min(FB.returns$yearly.returns)


# Quartile 1

summary(AAPL.returns$yearly.returns)[2]

summary(AMZN.returns$yearly.returns)[2]

summary(NFLX.returns$yearly.returns)[2]

summary(FB.returns$yearly.returns)[2]




# Median

median(AAPL.returns$yearly.returns)

median(AMZN.returns$yearly.returns)

median(NFLX.returns$yearly.returns)

median(FB.returns$yearly.returns)


# Quartile 3

summary(AAPL.returns$yearly.returns)[5]

summary(AMZN.returns$yearly.returns)[5]

summary(NFLX.returns$yearly.returns)[5]

summary(FB.returns$yearly.returns)[5]



# Maximum

max(AAPL.returns$yearly.returns)

max(AMZN.returns$yearly.returns)

max(NFLX.returns$yearly.returns)

max(FB.returns$yearly.returns)


# Everything togeher

summary(AAPL.returns$yearly.returns)

summary(AMZN.returns$yearly.returns)

summary(NFLX.returns$yearly.returns)

summary(FB.returns$yearly.returns)


# Variance

var(AAPL.returns$yearly.returns)

var(AMZN.returns$yearly.returns)

var(NFLX.returns$yearly.returns)

var(FB.returns$yearly.returns)


# Standard Deviation

sd(AAPL.returns$yearly.returns)

sd(AMZN.returns$yearly.returns)

sd(NFLX.returns$yearly.returns)

sd(FB.returns$yearly.returns)


# Skewness

skewness(AAPL.returns$yearly.returns)

skewness(AMZN.returns$yearly.returns)

skewness(NFLX.returns$yearly.returns)

skewness(FB.returns$yearly.returns)


# Kurtosis

kurtosis(AAPL.returns$yearly.returns)

kurtosis(AMZN.returns$yearly.returns)

kurtosis(NFLX.returns$yearly.returns)

kurtosis(FB.returns$yearly.returns)


library("car")
AAPL.returns[1:2]
scatterplotMatrix(AAPL.returns.[1:2])




### Exercise 4.2 Between securities and with index

Plot all securities vis-a-vis the index. Include a regression line and regression information. Can you plot rolling correlations between assets (and/or the index)?

```{r}
table.CAPM
```






## Exercise 5: Performance Analysis

Create multiple portfolios using `tq_portfolio()` (e.g. an equally weighted one, a market-value weighted one, and one where you create a trading strategy according to your liking). DO a performance analysis a la `vignette("TQ05-performance-analysis-with-tidyquant")`.



Ra <- c("AAPL", "GOOG", "NFLX") %>%
    tq_get(get  = "stock.prices",
           from = "2010-01-01",
           to   = "2015-12-31") %>%
    group_by(symbol) %>%
    tq_transmute(select     = adjusted, 
                 mutate_fun = periodReturn, 
                 period     = "monthly", 
                 col_rename = "Ra")
                 
                 
Rb <- "XLK" %>%
    tq_get(get  = "stock.prices",
           from = "2010-01-01",
           to   = "2015-12-31") %>%
    tq_transmute(select     = adjusted, 
                 mutate_fun = periodReturn, 
                 period     = "monthly", 
                 col_rename = "Rb")


RaRb <- left_join(Ra, Rb, by = c("date" = "date"))

RaRb_capm <- RaRb %>%
    tq_performance(Ra = Ra, 
                   Rb = Rb, 
                   performance_fun = table.CAPM)


RaRb_capm %>% select(symbol, Alpha, Beta)

tq_performance_fun_options()

stock_returns_monthly <- c("AAPL", "GOOG", "NFLX") %>%
    tq_get(get  = "stock.prices",
           from = "2010-01-01",
           to   = "2015-12-31") %>%
    group_by(symbol) %>%
    tq_transmute(select     = adjusted, 
                 mutate_fun = periodReturn, 
                 period     = "monthly", 
                 col_rename = "Ra")

baseline_returns_monthly <- "XLK" %>%
    tq_get(get  = "stock.prices",
           from = "2010-01-01",
           to   = "2015-12-31") %>%
    tq_transmute(select     = adjusted, 
                 mutate_fun = periodReturn, 
                 period     = "monthly", 
                 col_rename = "Rb")
stock_returns_monthly_multi <- stock_returns_monthly %>%
    tq_repeat_df(n = 3)
stock_returns_monthly_multi


weights <- c(
    0.50, 0.25, 0.25,
    0.25, 0.50, 0.25,
    0.25, 0.25, 0.50
)


stocks <- c("AAPL", "GOOG", "NFLX")
weights_table <-  tibble(stocks) %>%
    tq_repeat_df(n = 3) %>%
    bind_cols(tibble(weights)) %>%
    group_by(portfolio)
weights_table


portfolio_returns_monthly_multi <- stock_returns_monthly_multi %>%
    tq_portfolio(assets_col  = symbol, 
                 returns_col = Ra, 
                 weights     = weights_table, 
                 col_rename  = "Ra")


RaRb_multiple_portfolio <- left_join(portfolio_returns_monthly_multi, 
                                     baseline_returns_monthly,
                                     by = "date")


RaRb_multiple_portfolio %>%
    tq_performance(Ra = Ra, Rb = Rb, performance_fun = table.CAPM)

RaRb_multiple_portfolio %>%
    tq_performance(Ra = Ra, Rb = NULL, performance_fun = SharpeRatio)

